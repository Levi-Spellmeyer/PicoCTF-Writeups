1. ssh into the instance using the provided ssh command and password
2. used ls to just see what was provided in the instance (1 txt 1 .sh 1 directory of a bunch of text files)
3. note The files in the directory are al named a bunch of random characters and numbers
4. cat X3z7ayAf (randomly chosen file) results in gHZQsfMPUszdJv21MenkwBPl4OI3JAYfKdMeieHtDjQSa5Y2Ez237sj4zVXkN96
5. cat checksum.txt gives me 55b983afdd9d10718f1db3983459efc5cc3f5a66841e2651041e25dec3efd46a
6. cat the decrypt.sh to see what I could make sense of
7. On 2nd if statement i see aes-256 could be sha-256 and aes could be advanced encryption standard
8. tried cat checksum.txt | ./decrypt.sh 
Expected usage: decrypt.sh <filename>
9. tried grep the checksum provided -r files
10. You can create a SHA checksum of a file with sha256sum <file> or all files in a directory with sha256sum <directory>/*. was a hint provided by the challenge creator
11. going to try creating a checksum for whole directory and using grep to check for the checksum i was provide.
12.  sha256sum files/* >> checksums.txt to create a file of all the checksums that i can then grep easily without having to worry about any weird piping
13. echo 55b983afdd9d10718f1db3983459efc5cc3f5a66841e2651041e25dec3efd46a | grep checksums.txt did not return anything
14. decided to do some research into grep and hashes and sha256sum as i was stumped
15. read about using the wildcard * in the sha256sum * command to calculate the sha256 checksums for all files in the directory you are currently in
16. removed the file i stored previous checksums in
17. navigated to files directory
18. ran sha256sum * >> check and used grep afterwards got nothing
19. looked up specification of how checksums and hashed relate on chat gpt
Checksum (or Hash): You have a file and a provided checksum value (e.g., from a website or distributor).

Generate the Hash: You compute the checksum of your file using a hash function (like SHA-256).

Compare the Results: You compare the computed checksum of your file with the provided checksum. If they match, it indicates that the file is likely unaltered and from the original distributor. If they don't match, the file may be incomplete or tampered with.
20. So my understanding of hashes and checksums were correct so my issue must be in how im trying to use grep and pipes
21.  sha256sum files/* | grep $(cat checksum.txt)
55b983afdd9d10718f1db3983459efc5cc3f5a66841e2651041e25dec3efd46a  files/2cdcb2de
22. this variation hashes all the files and uses that output to pipe to grep instead of hashing them after the pipe
23. this returned a file
24. rand the ./decrypt with the file outputed from the grep and got the decrypted key of picoCTF{trust_but_verify_2cdcb2de}
25. Final thoughts: checksums are used to validate a files integrity or to identify a file. In this case i needed to hash the contents of all the files in the directory and compare it to my provided checksum to see which file i was looking for and when i decrypted its contents using the provided function i was given the flag i was lookng ofr 
